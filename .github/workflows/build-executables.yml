name: Build Multi-Platform Executables

on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            executable: PythonExceptionQuiz
          - os: windows-latest
            platform: windows  
            executable: PythonExceptionQuiz.exe
          - os: macos-latest
            platform: macos
            executable: PythonExceptionQuiz
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      run: pip install uv
    
    - name: Install dependencies
      run: |
        uv sync
        uv add pygame pyinstaller
        uv pip list
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libfreetype6-dev
    
    - name: Build executable
      shell: bash
      run: |
        ls -la
        ls -la data/
        ls -la src/
        uv run python build_executable.py --package
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-exception-quiz-${{ matrix.platform }}
        path: dist/PythonExceptionQuiz_Package/
        retention-days: 30
  
  release:
    needs: build
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create release packages
      run: |
        cd artifacts
        for platform in linux windows macos; do
          if [ -d "python-exception-quiz-$platform" ]; then
            zip -r "python-exception-quiz-$platform.zip" "python-exception-quiz-$platform"
          fi
        done
    
    - name: Get release info
      id: release_info
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "release_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "prerelease=false" >> $GITHUB_OUTPUT
        else
          echo "tag_name=dev-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "release_name=Development Build $(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Delete existing development release
      if: "!startsWith(github.ref, 'refs/tags/v')"
      run: |
        gh release list --limit 50 | grep "Development Build" | while read release; do
          tag=$(echo "$release" | awk '{print $1}')
          echo "Deleting old development release: $tag"
          gh release delete "$tag" --yes --cleanup-tag || true
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_info.outputs.tag_name }}
        name: ${{ steps.release_info.outputs.release_name }}
        files: artifacts/*.zip
        generate_release_notes: true
        draft: false
        prerelease: ${{ steps.release_info.outputs.prerelease }}
        body: |
          # Python Exception Quiz - Multi-Platform Release
          
          This release contains standalone executables for all major platforms.
          No Python installation required!
          
          ## Download Instructions:
          - **Windows**: Download `python-exception-quiz-windows.zip`
          - **macOS**: Download `python-exception-quiz-macos.zip`  
          - **Linux**: Download `python-exception-quiz-linux.zip`
          
          Extract the zip file and run the executable to start playing!
          
          ## Features:
          - Interactive pygame-based GUI
          - Multiple difficulty levels
          - High score tracking
          - Progress saving
          - Autocomplete for exception names
          
          Built from commit: ${{ github.sha }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}